# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.ssh.insert_key = true

  # Общая конфигурация
  config.vm.box = "cloud-image/ubuntu-24.04"
  config.vm.box_version = "20250805.0.0"

  # Конфигурация для libvirt (общая)
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.uri = 'qemu:///system'
    libvirt.memory = 4096
    libvirt.cpus = 2
    libvirt.nested = true
    libvirt.disk_driver :cache => 'none'
    libvirt.disk_bus = "virtio"
    libvirt.default_prefix = "keepalived_"
    libvirt.nic_model_type = "virtio"
    libvirt.management_network_mode = "route"
  end

  # Определение первой машины
  config.vm.define "hallltest" do |hallltest|
    hallltest.vm.hostname = "hallltest"
    hallltest.vm.network "forwarded_port", guest: 8888, host: 8888
    hallltest.vm.network "forwarded_port", guest: 9999, host: 9999
    hallltest.vm.network "forwarded_port", guest: 80, host: 8081
    hallltest.vm.network "forwarded_port", guest: 8080, host: 8082
    hallltest.vm.network "forwarded_port", guest: 888, host: 8083
    hallltest.vm.network "forwarded_port", guest: 1325, host: 8084
    hallltest.vm.network "forwarded_port", guest: 8088, host: 8088
    hallltest.vm.cloud_init do |cloud_init|
      cloud_init.content_type = "text/cloud-config"
      cloud_init.inline = <<-EOF
        package_update: true
        package_upgrade: true
      EOF
    end

    hallltest.vm.synced_folder "2",  "/vagrant",
      type: "rsync",
      rsync__args: ["--verbose", "--archive", "--delete"],
      rsync__exclude: ["nginx", "haproxy"],
      create: true

    hallltest.vm.synced_folder "./2/nginx",  "/etc/nginx/conf.d/",
      type: "rsync",
      rsync__args: ["--verbose", "--archive", "--delete", "--rsync-path='sudo rsync'"],
      rsync__exclude: ["upstream.inc"],
      create: true

    hallltest.vm.synced_folder "./2/nginx",  "/etc/nginx/include/",
      type: "rsync",
      rsync__args: ["--verbose", "--archive", "--delete", "--rsync-path='sudo rsync'"],
      rsync__exclude: ["example-http.conf"],
      create: true

    hallltest.vm.synced_folder "service",  "/usr/lib/systemd/system/",
      type: "rsync",
      rsync__args: ["--verbose", "--archive", "--rsync-path='sudo rsync'"],
      create: true

    hallltest.vm.provision "shell", inline: <<-SHELL
      export DEBIAN_FRONTEND=noninteractive
      sudo systemctl enable --now cloud-init
      sudo cloud-init init
      sudo cloud-init clean
      sudo apt update -y
      sudo apt install -y \
      openssh-server \
      curl \
      ca-certificates \
      nginx \
      libnginx-mod-stream \
      haproxy \
      nano \
      apt-transport-https \
      gnupg
      
      sudo bash -c "cat >> /etc/nginx/nginx.conf <<'EOF'
stream {
    include /etc/nginx/include/upstream.inc;
    server {
        listen 8080;
        error_log /var/log/nginx/example-tcp-error.log;
        proxy_pass example_app;
    }
}
EOF"
    
      sudo bash -c "cat >> /etc/haproxy/haproxy.cfg <<'EOF'

listen stats  # веб-страница со статистикой
        bind                    :888
        mode                    http
        stats                   enable
        stats uri               /stats
        stats refresh           5s
        stats realm             Haproxy\ Statistics

frontend example  # секция фронтенд
        mode http
        bind :8088
        default_backend web_servers

backend web_servers    # секция бэкенд
        mode http
        balance roundrobin
        option httpchk
        http-check send meth GET uri /index.html
        server s1 127.0.0.1:8888 check
        server s2 127.0.0.1:9999 check

listen web_tcp

        bind :1325

        server s1 127.0.0.1:8888 check inter 3s
        server s2 127.0.0.1:9999 check inter 3s
EOF"
      sudo sed -i "3s| weight=3||" /etc/nginx/include/upstream.inc

      sudo systemctl enable --now python-http1.service
      sudo systemctl enable --now python-http2.service
      sudo systemctl enable --now nginx.service
      sudo systemctl reload nginx.service
      sudo systemctl enable haproxy.service
      sudo systemctl restart haproxy.service
    SHELL
  end
end